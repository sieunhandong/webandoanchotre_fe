import React, { useState } from "react";
import {
  Dialog,
  DialogTitle,
  DialogContent,
  DialogActions,
  Button,
  Box,
  Typography,
  Grid,
  Paper,
  TableContainer,
  Table,
  TableHead,
  TableRow,
  TableCell,
  TableBody,
  Divider,
  TextField,
  IconButton,
  Tooltip,
  DialogContentText,
} from "@mui/material";
import {
  Edit as EditIcon,
  Save as SaveIcon,
  Refresh as RefreshIcon,
} from "@mui/icons-material";
import {
  updateMealMenu,
  aiSuggestMenu,
} from "../../../services/AdminService/orderService";

const formatCurrency = (v) =>
  v ? `${v.toLocaleString("vi-VN")} VNƒê` : "0 VNƒê";

export default function OrderDetailsDialog({ open, order, onClose, refresh }) {
  const [editingIndex, setEditingIndex] = useState(null);
  const [editedMenu, setEditedMenu] = useState("");
  const [loadingAI, setLoadingAI] = useState(false);
  const [aiMenu, setAiMenu] = useState([]); // d·ªØ li·ªáu th·ª±c ƒë∆°n t·ª´ AI
  const [showAIPopup, setShowAIPopup] = useState(false); // popup x√°c nh·∫≠n AI

  if (!open || !order) return null;

  const delivery = order.delivery || {};
  const address = delivery.address || {};
  const baby = order.userId?.userInfo?.babyInfo || {};
  const items = order.items || [];
  const menus = order.mealSuggestions || [];

  // üöÄ G·ªçi AI ƒë·ªÉ g·ª£i √Ω th·ª±c ƒë∆°n m·ªõi
  const handleAISuggest = async () => {
    try {
      setLoadingAI(true);
      const res = await aiSuggestMenu(order._id);
      if (res.success && res.data) {
        setAiMenu(res.data); // backend ƒë√£ tr·∫£ ƒë√∫ng { day, menu: [] }
        setShowAIPopup(true);
      } else {
        alert("‚ùå AI kh√¥ng tr·∫£ v·ªÅ d·ªØ li·ªáu h·ª£p l·ªá");
      }
    } catch (err) {
      console.error(err);
      alert("‚ùå L·ªói khi g·ª£i √Ω th·ª±c ƒë∆°n b·∫±ng AI");
    } finally {
      setLoadingAI(false);
    }
  };
  // üíæ Admin x√°c nh·∫≠n d√πng th·ª±c ƒë∆°n AI
  const handleConfirmAI = async () => {
    try {
      await updateMealMenu(order._id, aiMenu);
      alert("‚úÖ ƒê√£ c·∫≠p nh·∫≠t th·ª±c ƒë∆°n AI v√†o ƒë∆°n h√†ng!");
      setShowAIPopup(false);
      refresh();
    } catch (err) {
      console.error(err);
      alert("‚ùå L·ªói khi c·∫≠p nh·∫≠t th·ª±c ƒë∆°n AI");
    }
  };

  // üìù L∆∞u khi admin s·ª≠a menu th·ªß c√¥ng
  const handleSaveMenu = async (menuId) => {
    try {
      const updatedMenus = [...menus];
      updatedMenus[editingIndex].menu = editedMenu;
      await updateMealMenu(order._id, updatedMenus);
      alert("‚úÖ ƒê√£ c·∫≠p nh·∫≠t th·ª±c ƒë∆°n th√†nh c√¥ng");
      setEditingIndex(null);
      refresh();
    } catch (err) {
      console.error(err);
      alert("‚ùå L·ªói khi c·∫≠p nh·∫≠t th·ª±c ƒë∆°n");
    }
  };

  return (
    <>
      {/* --- POPUP CH√çNH: Chi ti·∫øt ƒë∆°n h√†ng --- */}
      <Dialog open={open} onClose={onClose} fullWidth maxWidth="md">
        <DialogTitle>
          <Typography variant="h6">
            Chi ti·∫øt ƒë∆°n h√†ng{" "}
            <Typography component="span" color="primary" fontWeight="600">
              #{order._id}
            </Typography>
          </Typography>
        </DialogTitle>

        <DialogContent dividers>
          <Grid container spacing={2}>
            {/* Th√¥ng tin kh√°ch h√†ng */}
            <Grid item xs={12} md={6}>
              <Paper sx={{ p: 2 }}>
                <Typography fontWeight={600} mb={1}>
                  üë§ Th√¥ng tin kh√°ch h√†ng
                </Typography>
                <Typography>T√™n: {order.userId?.name || "N/A"}</Typography>
                <Typography>Email: {order.userId?.email || "N/A"}</Typography>
                <Typography>ƒêi·ªán tho·∫°i: {order.userId?.phone || "N/A"}</Typography>
                <Typography>
                  Ng√†y ƒë·∫∑t: {new Date(order.createdAt).toLocaleString("vi-VN")}
                </Typography>
              </Paper>
            </Grid>

            {/* ƒê·ªãa ch·ªâ giao h√†ng */}
            <Grid item xs={12} md={6}>
              <Paper sx={{ p: 2 }}>
                <Typography fontWeight={600} mb={1}>
                  üöö ƒê·ªãa ch·ªâ giao h√†ng
                </Typography>
                <Typography>
                  {address.address}, {address.wardName}, {address.districtName},{" "}
                  {address.provinceName}
                </Typography>
                <Typography>Ng√†y giao d·ª± ki·∫øn: {delivery.time}</Typography>
              </Paper>
            </Grid>

            {/* Th√¥ng tin b√© */}
            <Grid item xs={12}>
              <Paper sx={{ p: 2 }}>
                <Typography fontWeight={600} mb={1}>
                  üë∂ Th√¥ng tin b√©
                </Typography>
                <Typography>Tu·ªïi: {baby.age || "Ch∆∞a c·∫≠p nh·∫≠t"} th√°ng</Typography>
                <Typography>C√¢n n·∫∑ng: {baby.weight || "Ch∆∞a c·∫≠p nh·∫≠t"} kg</Typography>
                <Typography>
                  Ph∆∞∆°ng ph√°p ƒÉn d·∫∑m:{" "}
                  {baby.feedingMethod === "traditional"
                    ? "Truy·ªÅn th·ªëng"
                    : baby.feedingMethod === "blw"
                      ? "BLW"
                      : "K·∫øt h·ª£p"}
                </Typography>
                <Typography>
                  D·ªã ·ª©ng:{" "}
                  {baby.allergies?.length
                    ? baby.allergies.join(", ")
                    : "Kh√¥ng c√≥"}
                </Typography>
              </Paper>
            </Grid>
          </Grid>

          {/* Danh s√°ch s·∫£n ph·∫©m */}
          <Box mt={3}>
            <Paper>
              <Box p={2} bgcolor="grey.50">
                <Typography fontWeight="600">
                  S·∫£n ph·∫©m ({items.length})
                </Typography>
              </Box>
              <TableContainer>
                <Table>
                  <TableHead>
                    <TableRow>
                      <TableCell>T√™n set</TableCell>
                      <TableCell align="center">S·ªë ng√†y</TableCell>
                      <TableCell align="right">Gi√°</TableCell>
                    </TableRow>
                  </TableHead>
                  <TableBody>
                    {items.map((item, i) => (
                      <TableRow key={i}>
                        <TableCell>{item.setId?.title || "N/A"}</TableCell>
                        <TableCell align="center">
                          {item.duration || "-"}
                        </TableCell>
                        <TableCell align="right">
                          {formatCurrency(item.price)}
                        </TableCell>
                      </TableRow>
                    ))}
                  </TableBody>
                </Table>
              </TableContainer>

              <Divider />
              <Box p={2} display="flex" justifyContent="space-between">
                <Typography fontWeight="bold">T·ªïng ti·ªÅn:</Typography>
                <Typography color="primary" fontWeight="bold">
                  {formatCurrency(order.total)}
                </Typography>
              </Box>
            </Paper>
          </Box>

          {/* Th·ª±c ƒë∆°n g·ª£i √Ω */}
          <Box mt={3}>
            <Box
              display="flex"
              justifyContent="space-between"
              alignItems="center"
              mb={1}
            >
              <Typography fontWeight="600">üç± Th·ª±c ƒë∆°n g·ª£i √Ω</Typography>
              <Button
                variant="outlined"
                startIcon={<RefreshIcon />}
                onClick={handleAISuggest}
                disabled={loadingAI}
              >
                {loadingAI ? "ƒêang g·ª£i √Ω..." : "G·ª£i √Ω l·∫°i b·∫±ng AI"}
              </Button>
            </Box>

            <Paper>
              <TableContainer>
                <Table>
                  <TableHead>
                    <TableRow>
                      <TableCell align="center">Ng√†y</TableCell>
                      <TableCell>Th·ª±c ƒë∆°n</TableCell>
                      <TableCell align="center">H√†nh ƒë·ªông</TableCell>
                    </TableRow>
                  </TableHead>
                  <TableBody>
                    {menus.map((m, idx) => (
                      <TableRow key={m._id || idx}>
                        <TableCell align="center">Ng√†y {m.day}</TableCell>
                        <TableCell>
                          {editingIndex === idx ? (
                            <TextField
                              fullWidth
                              multiline
                              rows={2}
                              value={editedMenu}
                              onChange={(e) => setEditedMenu(e.target.value)}
                            />
                          ) : (
                            Array.isArray(m.menu)
                              ? m.menu.join(" | ")
                              : typeof m.menu === "string"
                                ? m.menu
                                : "Kh√¥ng c√≥ d·ªØ li·ªáu"
                          )}
                        </TableCell>
                        <TableCell align="center">
                          {editingIndex === idx ? (
                            <IconButton
                              color="success"
                              onClick={() => handleSaveMenu(m._id)}
                            >
                              <SaveIcon />
                            </IconButton>
                          ) : (
                            <Tooltip title="S·ª≠a th·ª±c ƒë∆°n">
                              <IconButton
                                onClick={() => {
                                  setEditingIndex(idx);
                                  setEditedMenu(
                                    Array.isArray(m.menu)
                                      ? m.menu.join(" | ")
                                      : m.menu
                                  );
                                }}
                              >
                                <EditIcon />
                              </IconButton>
                            </Tooltip>
                          )}
                        </TableCell>
                      </TableRow>
                    ))}
                  </TableBody>
                </Table>
              </TableContainer>
            </Paper>
          </Box>
        </DialogContent>

        <DialogActions>
          <Button onClick={onClose} variant="contained">
            ƒê√≥ng
          </Button>
        </DialogActions>
      </Dialog>

      {/* --- POPUP X√ÅC NH·∫¨N TH·ª∞C ƒê∆†N AI --- */}
      <Dialog open={showAIPopup} onClose={() => setShowAIPopup(false)} fullWidth maxWidth="sm">
        <DialogTitle>ü§ñ Th·ª±c ƒë∆°n AI ƒë·ªÅ xu·∫•t</DialogTitle>
        <DialogContent dividers>
          {aiMenu && aiMenu.length > 0 ? (
            <Box>
              {aiMenu.length > 0 ? (
                aiMenu.map((m, idx) => {
                  // N·∫øu m b·ªã tr·∫£ v·ªÅ l√† object JSON string th√¨ parse
                  let dayData = typeof m === "string" ? JSON.parse(m) : m;
                  const menus = Array.isArray(dayData.menu)
                    ? dayData.menu
                    : [dayData.menu].filter(Boolean);

                  return (
                    <Box key={idx} mb={2}>
                      <Typography fontWeight="bold">
                        Ng√†y {dayData.day || idx + 1}
                      </Typography>

                      {menus.map((meal, i) => {
                        let text =
                          typeof meal === "string"
                            ? meal
                            : typeof meal === "object"
                              ? JSON.stringify(meal)
                              : String(meal);

                        return (
                          <Typography key={i} sx={{ ml: 2, color: "text.secondary" }}>
                            ‚Ä¢ {text}
                          </Typography>
                        );
                      })}

                      <Divider sx={{ my: 1 }} />
                    </Box>
                  );
                })
              ) : (
                <DialogContentText>Kh√¥ng c√≥ d·ªØ li·ªáu th·ª±c ƒë∆°n t·ª´ AI.</DialogContentText>
              )}
            </Box>
          ) : (
            <DialogContentText>
              Kh√¥ng c√≥ d·ªØ li·ªáu th·ª±c ƒë∆°n t·ª´ AI.
            </DialogContentText>
          )}
        </DialogContent>
        <DialogActions>
          <Button onClick={() => setShowAIPopup(false)}>H·ªßy</Button>
          <Button variant="contained" color="primary" onClick={handleConfirmAI}>
            D√πng th·ª±c ƒë∆°n n√†y
          </Button>
        </DialogActions>
      </Dialog>
    </>
  );
}
