import React, { useEffect, useState } from "react";
import { step6 } from "../../services/QuizService";
import ArrowBackIosNewRoundedIcon from "@mui/icons-material/ArrowBackIosNewRounded";
import ArrowForwardIosRoundedIcon from "@mui/icons-material/ArrowForwardIosRounded";
import "./step6.css";

const Step6 = ({ data, onNext, onPrev }) => {
    const [summary, setSummary] = useState(null);
    const [loading, setLoading] = useState(false);
    const [agree, setAgree] = useState(false);
    const sessionId = data?.sessionId;

    useEffect(() => {
        if (sessionId) {
            setLoading(true);
            step6(sessionId)
                .then((res) => {
                    if (res.data.success) setSummary(res.data.data);
                })
                .catch(console.error)
                .finally(() => setLoading(false));
        }
    }, [sessionId]);

    if (loading) return <p className="loading">ƒêang t·∫£i d·ªØ li·ªáu t·ªïng h·ª£p...</p>;
    if (!summary)
        return <p className="loading">Kh√¥ng c√≥ d·ªØ li·ªáu t·ªïng h·ª£p n√†o ƒë∆∞·ª£c t√¨m th·∫•y.</p>;

    const { childInfo, selectedProducts, selectedSet } = summary;
    const getFeedingMethodLabel = (method) => {
        switch (method) {
            case "traditional":
                return "ƒÇn d·∫∑m truy·ªÅn th·ªëng";
            case "blw":
                return "ƒÇn d·∫∑m t·ª± ch·ªâ huy (BLW)";
            case "japanese":
                return "ƒÇn d·∫∑m ki·ªÉu Nh·∫≠t";
            default:
                return "Kh√¥ng x√°c ƒë·ªãnh";
        }
    };

    return (
        <div className="step6-wrapper">
            <h1 className="step6-header">B∆∞·ªõc 6: K·∫øt qu·∫£ g·ª£i √Ω cho b√© üéâ</h1>

            <div className="step6-content">
                {/* --- C·ªôt tr√°i --- */}
                <div className="step6-left">
                    <div className="step6-card">
                        <h3>üë∂ Th√¥ng tin b√©</h3>
                        <ul>
                            <li><strong>Th√°ng tu·ªïi:</strong> {childInfo?.age}</li>
                            <li><strong>C√¢n n·∫∑ng:</strong> {childInfo?.weight} kg</li>
                            <li><strong>Ph∆∞∆°ng ph√°p ƒÉn d·∫∑m:</strong> {getFeedingMethodLabel(childInfo?.feedingMethod)}</li>
                            <li>
                                <strong>D·ªã ·ª©ng:</strong>{" "}
                                {childInfo?.allergies?.length
                                    ? childInfo.allergies.join(", ")
                                    : "Kh√¥ng c√≥"}
                            </li>
                        </ul>
                    </div>

                    <div className="step6-card">
                        <h3>ü•¶ Nguy√™n ƒë√£ ch·ªçn</h3>
                        <div className="step6-ingredients">
                            {selectedProducts?.length ? (
                                selectedProducts.map((p, i) => (
                                    <div key={i} className="ingredient-chip">
                                        {p.name}
                                    </div>
                                ))
                            ) : (
                                <p>Ch∆∞a ch·ªçn nguy√™n li·ªáu n√†o.</p>
                            )}
                        </div>
                    </div>

                    <div className="step6-card">
                        <h3>üç± Set ƒÉn d·∫∑m ƒë√£ ch·ªçn</h3>
                        {selectedSet ? (
                            <div className="step6-setbox">
                                <p><strong>T√™n:</strong> {selectedSet.name}</p>
                                <p><strong>Th·ªùi gian:</strong> {selectedSet.duration} ng√†y</p>
                                <p><strong>Gi√°:</strong> {selectedSet.price.toLocaleString()}ƒë</p>
                            </div>
                        ) : (
                            <p>Ch∆∞a ch·ªçn set ƒÉn d·∫∑m.</p>
                        )}
                    </div>
                </div>

                {/* --- C·ªôt ph·∫£i (ƒêi·ªÅu kho·∫£n) --- */}
                <div className="step6-right">
                    <div className="step6-card">
                        <h3>üìú ƒêi·ªÅu kho·∫£n & Ch√≠nh s√°ch</h3>
                        <p>
                            Ch√∫ng t√¥i cam k·∫øt b·∫£o m·∫≠t th√¥ng tin c·ªßa b·∫°n v√† ch·ªâ s·ª≠ d·ª•ng d·ªØ li·ªáu
                            cho m·ª•c ƒë√≠ch g·ª£i √Ω th·ª±c ƒë∆°n ph√π h·ª£p cho b√©.
                            Vui l√≤ng ƒë·ªçc k·ªπ v√† x√°c nh·∫≠n ƒë·ªìng √Ω ƒë·ªÉ ti·∫øp t·ª•c.
                        </p>
                        <label className="step6-agree">
                            <input
                                type="checkbox"
                                checked={agree}
                                onChange={(e) => setAgree(e.target.checked)}
                            />{" "}
                            T√¥i ƒë·ªìng √Ω v·ªõi <a href="#">ƒëi·ªÅu kho·∫£n & ch√≠nh s√°ch</a>.
                        </label>
                    </div>
                </div>
            </div>

            {/* --- N√∫t c·ªë ƒë·ªãnh gi·ªëng step4 --- */}
            <div className="step4-btn-group">
                <button
                    onClick={onPrev}
                    className="step4-btn step4-btn-back"
                    aria-label="Quay l·∫°i"
                >
                    <ArrowBackIosNewRoundedIcon />
                </button>
                <button
                    onClick={() => agree && onNext()}
                    className={`step4-btn step4-btn-next ${!agree ? "disabled" : ""}`}
                    disabled={!agree}
                    aria-label="Ti·∫øp t·ª•c"
                >
                    <ArrowForwardIosRoundedIcon />
                </button>
            </div>
        </div>
    );
};

export default Step6;
