import React, { useEffect, useState, useRef } from "react";
import {
  Box,
  Typography,
  Button,
  Card,
  CardContent,
  CardMedia,
  CircularProgress,
  Container,
  Chip,
  Rating,
  Avatar,
} from "@mui/material";
import { Link } from "react-router-dom";
import FormatQuoteIcon from '@mui/icons-material/FormatQuote';
import * as BlogService from "../../services/AdminService/blogService";
import * as MealSetService from "../../services/MealSetService";
import * as FoodService from "../../services/FoodService";
import "./HomePage.css";

const HomePage = () => {
  const [homeBlogs, setHomeBlogs] = useState([]);
  const [mealSets, setMealSets] = useState([]);
  const [recipes, setRecipes] = useState([]);
  const [loadingBlogs, setLoadingBlogs] = useState(true);
  const [loadingMealSets, setLoadingMealSets] = useState(true);
  const [loadingRecipes, setLoadingRecipes] = useState(true);
  const [currentSlide, setCurrentSlide] = useState(0);
  const [visibleSections, setVisibleSections] = useState({});

  const sectionRefs = {
    blogs: useRef(null),
    mealSets: useRef(null),
    recipes: useRef(null),
    reviews: useRef(null),
    partners: useRef(null),
    featured: useRef(null),
  };

  // Banner slides data
  const bannerSlides = [
    {
      title: "",
      subtitle: "",
      image: "/banner5.jpg",
      gradient: "linear-gradient(135deg, rgba(114, 205, 241, 0.95) 0%, rgba(114, 205, 241, 0.7) 100%)",
    },
    {
      title: "",
      subtitle: "",
      image: "/banner8.jpg",
      gradient: "linear-gradient(135deg, rgba(255, 183, 197, 0.95) 0%, rgba(255, 183, 197, 0.7) 100%)",
    },
    {
      title: " ",
      subtitle: " ",
      image: "/banner2.jpg",
      gradient: "linear-gradient(135deg, rgba(180, 231, 206, 0.95) 0%, rgba(180, 231, 206, 0.7) 100%)",
    },
  ];

  // Reviews data
  const reviews = [
    {
      name: "ƒê√†o Ho√†ng Mai",
      avatar: "/feedback1.jpg",
      rating: 5,
      comment: "C√°c c√¥ng th·ª©c ƒÉn d·∫∑m r·∫•t chi ti·∫øt v√† d·ªÖ l√†m. B√© nh√† m√¨nh r·∫•t th√≠ch ƒÉn!",
      date: "2 tu·∫ßn tr∆∞·ªõc",
    },
    {
      name: "Nguy·ªÖn Vi·ªát Anh",
      avatar: "/feedback2.jpg",
      rating: 5,
      comment: "Set ƒÉn d·∫∑m r·∫•t ƒëa d·∫°ng, gi√∫p m√¨nh ti·∫øt ki·ªám th·ªùi gian suy nghƒ© m√≥n ƒÉn cho b√©.",
      date: "1 th√°ng tr∆∞·ªõc",
    },
    {
      name: "Nguy·ªÖn VƒÉn ƒê√¥ng",
      avatar: "/feedback3.jpg",
      rating: 5,
      comment: "Blog c√≥ nhi·ªÅu b√†i vi·∫øt b·ªï √≠ch v·ªÅ dinh d∆∞·ª°ng, gi√∫p v·ª£ ch·ªìng m√¨nh h·ªçc h·ªèi nhi·ªÅu.",
      date: "3 tu·∫ßn tr∆∞·ªõc",
    },
    {
      name: "Thanh ƒêoan",
      avatar: "/feedback4.jpg",
      rating: 5,
      comment: "D·ªãch v·ª• t∆∞ v·∫•n nhi·ªát t√¨nh, chuy√™n nghi·ªáp. R·∫•t h√†i l√≤ng!",
      date: "1 tu·∫ßn tr∆∞·ªõc",
    },
  ];

  // Partners data
  const partners = [
    { name: "Vinamilk", logo: "/partner1.jpg" },
    { name: "Nutricare", logo: "/partner2.jpg" },
    { name: "Nestl√©", logo: "/partner3.jpg" },
    { name: "Organic", logo: "/partner4.jpg" },
  ];

  useEffect(() => {
    const fetchBlogs = async () => {
      try {
        setLoadingBlogs(true);
        const homeData = await BlogService.getHomeBlogs();
        setHomeBlogs(homeData.blogs);
      } catch (err) {
        console.error(err);
      } finally {
        setLoadingBlogs(false);
      }
    };

    const fetchMealSets = async () => {
      try {
        setLoadingMealSets(true);
        const mealData = await MealSetService.getAllMealSets();
        setMealSets(mealData.data.data.slice(0, 3));
      } catch (err) {
        console.error(err);
      } finally {
        setLoadingMealSets(false);
      }
    };

    const fetchRecipes = async () => {
      try {
        setLoadingRecipes(true);
        const res = await FoodService.getFoodHome();
        setRecipes(res.data.data);
      } catch (err) {
        console.error(err);
      } finally {
        setLoadingRecipes(false);
      }
    };

    fetchRecipes();
    fetchBlogs();
    fetchMealSets();
  }, []);

  // Auto slide banner every 5 seconds
  useEffect(() => {
    const timer = setInterval(() => {
      setCurrentSlide((prev) => (prev + 1) % bannerSlides.length);
    }, 5000);
    return () => clearInterval(timer);
  }, [bannerSlides.length]);

  // Enhanced Intersection Observer v·ªõi threshold t·ªët h∆°n
  useEffect(() => {
    const observers = {};
    const observerOptions = {
      threshold: 0.15, // Trigger khi 15% element xu·∫•t hi·ªán
      rootMargin: '0px 0px -50px 0px' // Trigger s·ªõm h∆°n m·ªôt ch√∫t
    };

    Object.keys(sectionRefs).forEach((key) => {
      if (sectionRefs[key].current) {
        observers[key] = new IntersectionObserver(
          ([entry]) => {
            if (entry.isIntersecting) {
              setVisibleSections((prev) => ({ ...prev, [key]: true }));
              // Unobserve sau khi ƒë√£ visible ƒë·ªÉ tr√°nh re-trigger
              observers[key].unobserve(entry.target);
            }
          },
          observerOptions
        );
        observers[key].observe(sectionRefs[key].current);
      }
    });

    // Observer cho featured grid section
    const featuredSection = document.querySelector('.featured-grid-section');
    if (featuredSection) {
      const featuredObserver = new IntersectionObserver(
        ([entry]) => {
          if (entry.isIntersecting) {
            featuredSection.classList.add('visible');
            featuredObserver.unobserve(entry.target);
          }
        },
        observerOptions
      );
      featuredObserver.observe(featuredSection);
    }

    return () => {
      Object.values(observers).forEach((observer) => observer.disconnect());
    };
  }, []);

  // const nextSlide = () => {
  //   setCurrentSlide((prev) => (prev + 1) % bannerSlides.length);
  // };

  // const prevSlide = () => {
  //   setCurrentSlide((prev) => (prev - 1 + bannerSlides.length) % bannerSlides.length);
  // };

  return (
    <Box className="homepage-container">
      {/* BANNER SLIDER */}
      <Box className="banner-slider">
        {bannerSlides.map((slide, index) => (
          <Box
            key={index}
            className={`banner-slide ${currentSlide === index ? 'active' : ''}`}
            sx={{
              background: `url('${slide.image}')`,
              backgroundSize: "cover",
              backgroundPosition: "center",
            }}
          >
            <Container maxWidth="lg">
              <Box className={`banner-content ${currentSlide === index ? 'animate' : ''}`}>
                {/* <Typography variant="h2" className="banner-title">
                  {slide.title}
                </Typography>
                <Typography variant="h5" className="banner-subtitle">
                  {slide.subtitle}
                </Typography> */}
                <Button
                  variant="contained"
                  size="large"
                  component={Link}
                  to="/quiz"
                  className="banner-button"
                >
                  B·∫Øt ƒë·∫ßu Quiz ngay üöÄ
                </Button>
              </Box>
            </Container>
          </Box>
        ))}

        {/* Navigation Arrows */}
        {/* <IconButton onClick={prevSlide} className="banner-arrow banner-arrow-left">
          <ArrowBackIosNewIcon />
        </IconButton>
        <IconButton onClick={nextSlide} className="banner-arrow banner-arrow-right">
          <ArrowForwardIosIcon />
        </IconButton> */}

        {/* Dots Indicator */}
        <Box className="banner-dots">
          {bannerSlides.map((_, index) => (
            <Box
              key={index}
              onClick={() => setCurrentSlide(index)}
              className={`banner-dot ${currentSlide === index ? 'active' : ''}`}
            />
          ))}
        </Box>
      </Box>

      {/* Decorative Wave */}
      <Box className="decorative-wave" />

      {/* Section 1: Chuy·ªán nh√† TinnyYummy */}
      <section id="about-section" className="about-section">
        <div className="about-container">
          {/* ·∫¢NH */}
          <div className="about-image-wrapper">
            <img
              src="/home_banner1.png"
              alt="Chuy·ªán nh√† TinyYummy"
              className="about-image"
            />
          </div>

          {/* N·ªòI DUNG */}
          <div className="about-content-wrapper">
            <h2 className="about-title">Chuy·ªán nh√† TY</h2>
            <p className="about-text">
              TinyYummy l√† th∆∞∆°ng hi·ªáu Vi·ªát trong lƒ©nh v·ª±c ƒë·ªì ƒÉn d·∫∑m cho tr·∫ª em,
              cam k·∫øt mang ƒë·∫øn nh·ªØng s·∫£n ph·∫©m dinh d∆∞·ª°ng an to√†n, ti·ªán l·ª£i v√† ch·∫•t l∆∞·ª£ng cao,
              ƒë·ªìng h√†nh c√πng ba m·∫π trong h√†nh tr√¨nh chƒÉm s√≥c v√† ph√°t tri·ªÉn to√†n di·ªán cho b√© y√™u.
            </p>
            <p className="about-text">
              V·ªõi ƒë·ªôi ng≈© chuy√™n gia dinh d∆∞·ª°ng gi√†u kinh nghi·ªám, ch√∫ng t√¥i nghi√™n c·ª©u
              v√† ph√°t tri·ªÉn c√°c c√¥ng th·ª©c ƒÉn d·∫∑m khoa h·ªçc, ph√π h·ª£p v·ªõi t·ª´ng giai ƒëo·∫°n ph√°t tri·ªÉn c·ªßa tr·∫ª.
            </p>
            <a href="/about-us" className="about-button">T√¨m hi·ªÉu th√™m v·ªÅ ch√∫ng t√¥i ‚ú®</a>
          </div>
        </div>
      </section>


      {/* BLOG SECTION */}
      <Container
        ref={sectionRefs.blogs}
        maxWidth="xl"
        className={`section ${visibleSections.blogs ? 'visible' : ''}`}
        sx={{ my: 10 }}
      >
        <Box className="section-header">
          <Box className="section-icon-chip">
            <Typography sx={{ fontSize: "2rem" }}>üìö</Typography>
            <Chip label="BLOG M·ªöI NH·∫§T" className="chip-primary" />
          </Box>
          <Typography variant="h3" className="section-title">
            B√ÄI VI·∫æT N·ªîI B·∫¨T
          </Typography>
          <Typography variant="body1" color="text.secondary" className="section-subtitle">
            C·∫≠p nh·∫≠t ki·∫øn th·ª©c dinh d∆∞·ª°ng m·ªõi nh·∫•t cho b√© y√™u t·ª´ c√°c chuy√™n gia h√†ng ƒë·∫ßu
          </Typography>
        </Box>

        {loadingBlogs ? (
          <Box textAlign="center">
            <CircularProgress sx={{ color: "#72CDF1" }} />
          </Box>
        ) : (
          <>
            <Box className="blog-grid">
              {homeBlogs.map((blog, idx) => (
                <Card
                  key={blog._id}
                  className="blog-card"
                  onClick={() => (window.location.href = `/blog/${blog._id}`)}
                >
                  {blog.images?.[0] && (
                    <Box className="blog-image-wrapper">
                      <CardMedia
                        component="img"
                        height="220"
                        image={blog.images[0]}
                        alt={blog.title}
                        className="blog-image"
                      />
                      <Box className="blog-overlay" />
                      <Chip label="M·ªõi" className="blog-badge" />
                    </Box>
                  )}
                  <CardContent sx={{ p: 3 }}>
                    <Typography variant="h6" className="blog-title">
                      {blog.title}
                    </Typography>
                  </CardContent>
                </Card>
              ))}
            </Box>

            <Box textAlign="center">
              <Button
                variant="contained"
                size="large"
                component={Link}
                to="/blog"
                className="btn-primary"
              >
                Xem th√™m b√†i vi·∫øt ‚Üí
              </Button>
            </Box>
          </>
        )}
      </Container>


      {/* MEAL SETS SECTION */}
      <Box
        ref={sectionRefs.mealSets}
        className={`section section-mealsets ${visibleSections.mealSets ? 'visible' : ''}`}
      >
        <Container maxWidth="xl">
          <Box className="section-header">
            <Box className="section-icon-chip">
              <Typography sx={{ fontSize: "2rem" }}>üç±</Typography>
              <Chip label="G√ìI ƒÇN D·∫∂M" className="chip-pink" />
            </Box>
            <Typography variant="h3" className="section-title">
              SET ƒÇN D·∫∂M ƒêA D·∫†NG
            </Typography>
            <Typography variant="body1" color="text.secondary" className="section-subtitle">
              L·ª±a ch·ªçn g√≥i ph√π h·ª£p nh·∫•t cho h√†nh tr√¨nh ƒÉn d·∫∑m c·ªßa b√© y√™u
            </Typography>
          </Box>

          {loadingMealSets ? (
            <Box textAlign="center">
              <CircularProgress sx={{ color: "#72CDF1" }} />
            </Box>
          ) : (
            <Box className="mealsets-grid">
              {mealSets.map((set, idx) => (
                <Card
                  key={set._id}
                  className={`mealset-card ${idx === 1 ? 'popular' : ''}`}
                  sx={{
                    cursor: 'pointer'
                  }}
                  onClick={() => window.location.href = `/mealset/${set._id}`}
                >
                  {idx === 1 && (
                    <Box className="popular-badge" sx={{ marginTop: '1rem' }}>
                      <Chip label="PH·ªî BI·∫æN NH·∫§T" className="chip-popular" />
                    </Box>
                  )}

                  <Typography variant="h5" className="mealset-title">
                    {set.title}
                  </Typography>

                  <Box className="mealset-price">
                    <Typography variant="h3" className="price">
                      {(set.price).toLocaleString('vi-VN')}
                    </Typography>
                    <Typography variant="body2" className="currency">
                      VND
                    </Typography>
                  </Box>

                  <Box className="mealset-features">
                    <Typography variant="body2" className="feature">
                      <Box component="span" className="checkmark">‚úì</Box>
                      Th·ªùi gian: {set.duration} ng√†y
                    </Typography>
                    <Typography variant="body2" className="feature">
                      <Box component="span" className="checkmark">‚úì</Box>
                      <span>{set.description}</span>
                    </Typography>
                    <Typography variant="body2" className="feature">
                      <Box component="span" className="checkmark">‚úì</Box>
                      <span>Menu c√° nh√¢n h√≥a</span>
                    </Typography>
                    <Typography variant="body2" className="feature">
                      <Box component="span" className="checkmark">‚úì</Box>
                      <span>Giao h√†ng t·∫≠n n∆°i trong {set.duration} ng√†y</span>
                    </Typography>
                    {set.extraInfo?.map((info, i) => (
                      <Typography key={i} variant="body2" className="feature">
                        <Box component="span" className="checkmark">‚úì</Box>
                        <span>{info}</span>
                      </Typography>
                    ))}
                  </Box>

                  <Button
                    variant="contained"
                    fullWidth
                    component={Link}
                    to={`/mealset/${set._id}`}
                    className={`btn-mealset ${idx === 1 ? 'primary' : 'outline'}`}
                    onClick={(e) => e.stopPropagation()}
                  >
                    Mua ngay üõí
                  </Button>
                </Card>
              ))}
            </Box>
          )}
        </Container>
      </Box>



      {/* FEATURED IMAGE SECTION - HI·ªÜU ·ª®NG ·∫¢NH B·ªä C·∫ÆT */}
      <section
        ref={sectionRefs.featured}
        className="featured-grid-section"
        style={{
          backgroundImage: "url('/homepage.jpeg')",
          backgroundSize: "cover",
          backgroundPosition: "center",
          backgroundRepeat: "no-repeat",
        }}
      >
        <div className="featured-overlay"></div>

        <div className="featured-grid">
          {[
            { icon: "üçé", title: "Dinh d∆∞·ª°ng khoa h·ªçc", text: "C√¥ng th·ª©c c√¢n ƒë·ªëi dinh d∆∞·ª°ng" },
            { icon: "üíö", title: "Organic 100%", text: "Kh√¥ng ch·∫•t b·∫£o qu·∫£n" },
            { icon: "üë∂", title: "An to√†n cho b√©", text: "Nguy√™n li·ªáu t∆∞∆°i ngon, s·∫°ch" },
            { icon: "‚≠ê", title: "Tin c·∫≠y nh·∫•t", text: "ƒê∆∞·ª£c h√†ng ngh√¨n m·∫π l·ª±a ch·ªçn" },
            { icon: "üë©‚Äçüç≥", title: "D·ªÖ d√†ng ch·∫ø bi·∫øn", text: "H∆∞·ªõng d·∫´n chi ti·∫øt t·ª´ng b∆∞·ªõc" },
            { icon: "üåà", title: "ƒêa d·∫°ng m√≥n ƒÉn", text: "Ph√π h·ª£p t·ª´ng giai ƒëo·∫°n ph√°t tri·ªÉn" },
          ].map((item, i) => (
            <div key={i} className={`featured-tile tile-${i + 1}`}>
              <div className="tile-content">
                <h3 className="tile-title">{item.title}</h3>
              </div>
            </div>
          ))}
        </div>
      </section>



      {/* RECIPES SECTION */}
      <section id="recipes-section" className="recipes-section" ref={sectionRefs.recipes}>
        <div className="recipes-header">
          <div className="recipes-header-text">
            <h2 className="recipes-title">KH√ÅM PH√Å C√îNG TH·ª®C</h2>
            <p className="recipes-subtitle">
              C√°c c√¥ng th·ª©c n·∫•u ƒÉn b·ªï d∆∞·ª°ng, d·ªÖ l√†m cho b√© y√™u c·ªßa b·∫°n
            </p>
          </div>
        </div>

        {loadingRecipes ? (
          <div className="recipes-loading">
            <div className="loader"></div>
          </div>
        ) : (
          <>
            <div className="recipes-grid">
              {recipes.map((recipe) => (
                <div
                  key={recipe._id}
                  className="recipe-card-plain"
                  onClick={() => (window.location.href = `/recipes/${recipe._id}`)}
                >
                  <div className="recipe-image-wrapper-plain">
                    <img
                      src={recipe.images?.[0]}
                      alt={recipe.name}
                      className="recipe-image-plain"
                    />
                  </div>

                  <div className="recipe-content-plain">
                    <h3 className="recipe-name-plain">{recipe.name}</h3>
                    <div className="recipe-tags-plain">
                      <span className="tag tag-blue">B·ªï d∆∞·ª°ng</span>
                      <span className="tag tag-green">D·ªÖ l√†m</span>
                    </div>
                  </div>
                </div>
              ))}
            </div>

            <div className="recipes-more">
              <a href="/recipes" className="recipes-btn">
                Xem th√™m c√¥ng th·ª©c ‚Üí
              </a>
            </div>
          </>
        )}
      </section>



      {/* REVIEWS SECTION */}
      <Box
        ref={sectionRefs.reviews}
        className={`section section-reviews ${visibleSections.reviews ? 'visible' : ''}`}
      >
        <Container maxWidth="xl">
          <Box className="section-header">
            <Box className="section-icon-chip">
              <Typography sx={{ fontSize: "2rem" }}>üí¨</Typography>
              <Chip label="ƒê√ÅNH GI√Å KH√ÅCH H√ÄNG" className="chip-gold" />
            </Box>
            <Typography variant="h3" className="section-title">
              KH√ÅCH H√ÄNG N√ìI G√å V·ªÄ CH√öNG T√îI
            </Typography>
            <Typography variant="body1" color="text.secondary" className="section-subtitle">
              H√†ng ng√†n ph·ª• huynh tin t∆∞·ªüng v√† l·ª±a ch·ªçn
            </Typography>
          </Box>

          <Box className="reviews-scroll">
            {reviews.map((review, idx) => (
              <Card key={idx} className="review-card">
                <FormatQuoteIcon className="quote-icon" />

                <Box className="review-header">
                  <Avatar
                    className="review-avatar"
                    src={review.avatar}
                    alt={review.name}
                  >
                    {!review.avatar && review.name.charAt(0)}
                  </Avatar>
                  <Box>
                    <Typography variant="h6" className="review-name">
                      {review.name}
                    </Typography>
                    <Typography variant="body2" color="text.secondary">
                      {review.date}
                    </Typography>
                  </Box>
                </Box>

                <Rating value={review.rating} readOnly className="review-rating" />

                <Typography variant="body1" className="review-comment">
                  "{review.comment}"
                </Typography>
              </Card>
            ))}
          </Box>
        </Container>
      </Box>

      {/* PARTNERS SECTION */}
      <Box
        ref={sectionRefs.partners}
        className={`section section-partners ${visibleSections.partners ? 'visible' : ''}`}
      >
        <Container maxWidth="xl">
          <Box className="section-header">
            <Box className="section-icon-chip">
              <Typography sx={{ fontSize: "2rem" }}>ü§ù</Typography>
              <Chip label="ƒê·ªêI T√ÅC" className="chip-gray" />
            </Box>
            <Typography variant="h3" className="section-title">
              ƒê·ªêI T√ÅC TIN C·∫¨Y
            </Typography>
            <Typography variant="body1" color="text.secondary" className="section-subtitle">
              H·ª£p t√°c c√πng c√°c th∆∞∆°ng hi·ªáu h√†ng ƒë·∫ßu
            </Typography>
          </Box>

          <Box className="partners-grid">
            {partners.map((partner, idx) => (
              <Box key={idx} className="partner-card">
                <img src={partner.logo} alt={partner.name} className="partner-image" />
                <Typography variant="body2" className="partner-name">
                  {partner.name}
                </Typography>
              </Box>
            ))}
          </Box>
        </Container>
      </Box>

      {/* CALL TO ACTION */}
      <Box className="section-cta">
        <Container maxWidth="md" className="cta-container">
          <Typography variant="h3" className="cta-title">
            B·∫Øt ƒë·∫ßu h√†nh tr√¨nh ƒÉn d·∫∑m ngay h√¥m nay! üåü
          </Typography>
          <Typography variant="h6" className="cta-subtitle">
            Nh·∫≠n t∆∞ v·∫•n mi·ªÖn ph√≠ t·ª´ chuy√™n gia dinh d∆∞·ª°ng
          </Typography>
          <Box className="cta-buttons">
            <Button
              variant="contained"
              size="large"
              component={Link}
              to="/quiz"
              className="btn-cta-primary"
            >
              L√†m Quiz ngay üéØ
            </Button>
            <Button
              variant="outlined"
              size="large"
              component={Link}
              to="/"
              className="btn-cta-outline"
            >
              Li√™n h·ªá t∆∞ v·∫•n üìû
            </Button>
          </Box>
        </Container>
      </Box>
    </Box>
  );
};

export default HomePage;